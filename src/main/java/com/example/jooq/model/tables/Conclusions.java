/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.model.tables;


import com.example.jooq.model.Keys;
import com.example.jooq.model.Public;
import com.example.jooq.model.tables.records.ConclusionsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conclusions extends TableImpl<ConclusionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.conclusions</code>
     */
    public static final Conclusions CONCLUSIONS = new Conclusions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConclusionsRecord> getRecordType() {
        return ConclusionsRecord.class;
    }

    /**
     * The column <code>public.conclusions.id</code>.
     */
    public final TableField<ConclusionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.conclusions.principal</code>.
     */
    public final TableField<ConclusionsRecord, String> PRINCIPAL = createField(DSL.name("principal"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.conclusions.amount</code>.
     */
    public final TableField<ConclusionsRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.conclusions.wallet</code>.
     */
    public final TableField<ConclusionsRecord, String> WALLET = createField(DSL.name("wallet"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.conclusions.cryptocurrency</code>.
     */
    public final TableField<ConclusionsRecord, String> CRYPTOCURRENCY = createField(DSL.name("cryptocurrency"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.conclusions.status</code>.
     */
    public final TableField<ConclusionsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.conclusions.timestamp</code>.
     */
    public final TableField<ConclusionsRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    private Conclusions(Name alias, Table<ConclusionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conclusions(Name alias, Table<ConclusionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.conclusions</code> table reference
     */
    public Conclusions(String alias) {
        this(DSL.name(alias), CONCLUSIONS);
    }

    /**
     * Create an aliased <code>public.conclusions</code> table reference
     */
    public Conclusions(Name alias) {
        this(alias, CONCLUSIONS);
    }

    /**
     * Create a <code>public.conclusions</code> table reference
     */
    public Conclusions() {
        this(DSL.name("conclusions"), null);
    }

    public <O extends Record> Conclusions(Table<O> child, ForeignKey<O, ConclusionsRecord> key) {
        super(child, key, CONCLUSIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConclusionsRecord, Integer> getIdentity() {
        return (Identity<ConclusionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConclusionsRecord> getPrimaryKey() {
        return Keys.CONCLUSIONS_PKEY;
    }

    @Override
    public Conclusions as(String alias) {
        return new Conclusions(DSL.name(alias), this);
    }

    @Override
    public Conclusions as(Name alias) {
        return new Conclusions(alias, this);
    }

    @Override
    public Conclusions as(Table<?> alias) {
        return new Conclusions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conclusions rename(String name) {
        return new Conclusions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conclusions rename(Name name) {
        return new Conclusions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conclusions rename(Table<?> name) {
        return new Conclusions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Double, String, String, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super Double, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
