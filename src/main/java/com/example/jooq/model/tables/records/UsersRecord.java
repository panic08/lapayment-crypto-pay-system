/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.model.tables.records;


import com.example.jooq.model.tables.Users;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record8<Integer, String, String, Double, Double, Double, Double, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.users.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.users.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.users.username</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.users.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.users.password</code>.
     */
    public void setPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.users.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.users.tron_balance</code>.
     */
    public void setTronBalance(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.users.tron_balance</code>.
     */
    public Double getTronBalance() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.users.bitcoin_balance</code>.
     */
    public void setBitcoinBalance(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.users.bitcoin_balance</code>.
     */
    public Double getBitcoinBalance() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>public.users.ethereum_balance</code>.
     */
    public void setEthereumBalance(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.users.ethereum_balance</code>.
     */
    public Double getEthereumBalance() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>public.users.matic_balance</code>.
     */
    public void setMaticBalance(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.users.matic_balance</code>.
     */
    public Double getMaticBalance() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>public.users.registeredat</code>.
     */
    public void setRegisteredat(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.users.registeredat</code>.
     */
    public String getRegisteredat() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Double, Double, Double, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, Double, Double, Double, Double, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Users.USERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Users.USERS.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return Users.USERS.PASSWORD;
    }

    @Override
    public Field<Double> field4() {
        return Users.USERS.TRON_BALANCE;
    }

    @Override
    public Field<Double> field5() {
        return Users.USERS.BITCOIN_BALANCE;
    }

    @Override
    public Field<Double> field6() {
        return Users.USERS.ETHEREUM_BALANCE;
    }

    @Override
    public Field<Double> field7() {
        return Users.USERS.MATIC_BALANCE;
    }

    @Override
    public Field<String> field8() {
        return Users.USERS.REGISTEREDAT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public Double component4() {
        return getTronBalance();
    }

    @Override
    public Double component5() {
        return getBitcoinBalance();
    }

    @Override
    public Double component6() {
        return getEthereumBalance();
    }

    @Override
    public Double component7() {
        return getMaticBalance();
    }

    @Override
    public String component8() {
        return getRegisteredat();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public Double value4() {
        return getTronBalance();
    }

    @Override
    public Double value5() {
        return getBitcoinBalance();
    }

    @Override
    public Double value6() {
        return getEthereumBalance();
    }

    @Override
    public Double value7() {
        return getMaticBalance();
    }

    @Override
    public String value8() {
        return getRegisteredat();
    }

    @Override
    public UsersRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public UsersRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public UsersRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UsersRecord value4(Double value) {
        setTronBalance(value);
        return this;
    }

    @Override
    public UsersRecord value5(Double value) {
        setBitcoinBalance(value);
        return this;
    }

    @Override
    public UsersRecord value6(Double value) {
        setEthereumBalance(value);
        return this;
    }

    @Override
    public UsersRecord value7(Double value) {
        setMaticBalance(value);
        return this;
    }

    @Override
    public UsersRecord value8(String value) {
        setRegisteredat(value);
        return this;
    }

    @Override
    public UsersRecord values(Integer value1, String value2, String value3, Double value4, Double value5, Double value6, Double value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(Integer id, String username, String password, Double tronBalance, Double bitcoinBalance, Double ethereumBalance, Double maticBalance, String registeredat) {
        super(Users.USERS);

        setId(id);
        setUsername(username);
        setPassword(password);
        setTronBalance(tronBalance);
        setBitcoinBalance(bitcoinBalance);
        setEthereumBalance(ethereumBalance);
        setMaticBalance(maticBalance);
        setRegisteredat(registeredat);
        resetChangedOnNotNull();
    }
}
